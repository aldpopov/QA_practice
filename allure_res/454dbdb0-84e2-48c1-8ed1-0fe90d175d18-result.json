{"name": "test_products_product_id_get_req[product_model1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "self = <pytest_fold.test_negative.TestService object at 0x0000020C27638410>\nproduct_model = {'category_id': None,\n 'created_at': 'Culture cut media factor table big outside.\\n'\n               'Foreign rise invo...otos': None,\n 'price': None,\n 'product_id': -211503433.315444,\n 'quantity': None,\n 'rating': None,\n 'updated_at': None}\nservice_api = <pytest_fold.conftest.ApiClient object at 0x0000020C27C00770>\n\n    @allure.feature('Get product by id')\n    @allure.description('Get single product by id')\n    def test_products_product_id_get_req(self, product_model, service_api):\n>       super().products_product_id_get_req(product_model, service_api)\n\npytest_fold\\test_negative.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nproduct_model = {'category_id': None,\n 'created_at': 'Culture cut media factor table big outside.\\n'\n               'Foreign rise invo...otos': None,\n 'price': None,\n 'product_id': -211503433.315444,\n 'quantity': None,\n 'rating': None,\n 'updated_at': None}\nservice_api = <pytest_fold.conftest.ApiClient object at 0x0000020C27C00770>\n\n    @staticmethod\n    def products_product_id_get_req(product_model, service_api):\n        with allure.step('1. Pick id of a single product'):\n            product_id = product_model.product_id\n        with allure.step('2. Get the product by id picked during the previous step'):\n            response = service_api.get(f'products/{product_id}')\n        with allure.step('3. Check if status code of the response is equal to 200'):\n>           assert response.status_code == 200\nE           assert 500 == 200\nE            +  where 500 = <Response [500]>.status_code\n\nsrc\\base_test_case\\test_microservice.py:23: AssertionError"}, "description": "Get single product by id", "steps": [{"name": "1. Pick id of a single product", "status": "passed", "start": 1720471601944, "stop": 1720471601944}, {"name": "2. Get the product by id picked during the previous step", "status": "passed", "start": 1720471601944, "stop": 1720471602038}, {"name": "3. Check if status code of the response is equal to 200", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"D:\\Git\\Go-Kafka-gRPC-MongoDB-microservice\\tests\\src\\base_test_case\\test_microservice.py\", line 23, in products_product_id_get_req\n    assert response.status_code == 200\n"}, "start": 1720471602038, "stop": 1720471602039}], "parameters": [{"name": "product_model", "value": "{'category_id': None,\n 'created_at': 'Culture cut media factor table big outside.\\n'\n               'Foreign rise involve. Remember military thus sense choose '\n               'street.',\n 'description': None,\n 'image_url': None,\n 'name': None,\n 'photos': None,\n 'price': None,\n 'product_id': -211503433.315444,\n 'quantity': None,\n 'rating': None,\n 'updated_at': None}"}], "start": 1720471601944, "stop": 1720471602039, "uuid": "77ec226e-9cb6-45c2-ba96-a7de07414746", "historyId": "78375a9945b6c8fa6a6c713eafaeb68b", "testCaseId": "ca3664b27a6cff7f868cdd92ff6ebfb2", "fullName": "pytest_fold.test_negative.TestService#test_products_product_id_get_req", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Get product by id"}, {"name": "story", "value": "Testing with incorrect inputs and type violations"}, {"name": "parentSuite", "value": "pytest_fold"}, {"name": "suite", "value": "test_negative"}, {"name": "subSuite", "value": "TestService"}, {"name": "host", "value": "Sanua-PC"}, {"name": "thread", "value": "1632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pytest_fold.test_negative"}]}