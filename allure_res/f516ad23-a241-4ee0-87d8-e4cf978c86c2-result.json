{"name": "test_products_search_get_req[product_model0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "self = <pytest_fold.test_positive.TestService object at 0x0000020C2763A030>\nproduct_model = {'category_id': None,\n 'created_at': None,\n 'description': 'deus',\n 'image_url': None,\n 'name': 'exhr',\n 'photos': None,\n 'price': 691029.526710028,\n 'product_id': None,\n 'quantity': 10,\n 'rating': 10,\n 'updated_at': None}\nservice_api = <pytest_fold.conftest.ApiClient object at 0x0000020C27C00D70>\n\n    @allure.feature('Search for product')\n    @allure.description('Search for product by description or name')\n    def test_products_search_get_req(self, product_model, service_api):\n>       super().products_search_get_req(product_model, service_api)\n\npytest_fold\\test_positive.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nproduct_model = {'category_id': None,\n 'created_at': None,\n 'description': 'deus',\n 'image_url': None,\n 'name': 'exhr',\n 'photos': None,\n 'price': 691029.526710028,\n 'product_id': None,\n 'quantity': 10,\n 'rating': 10,\n 'updated_at': None}\nservice_api = <pytest_fold.conftest.ApiClient object at 0x0000020C27C00D70>\n\n    @staticmethod\n    def products_search_get_req(product_model, service_api):\n        with allure.step('1. Pick parameters for search of a single product'):\n            params = {\n                'search': product_model.description,\n                'name': product_model.name,\n                'rating': product_model.rating\n            }\n        with allure.step('2. Get the product with these parameters: {}'.format(params)):\n            response = service_api.get('products/search', params=params)\n        with allure.step('3. Check if status code of the response is equal to 200'):\n>           assert response.status_code == 200\nE           assert 500 == 200\nE            +  where 500 = <Response [500]>.status_code\n\nsrc\\base_test_case\\test_microservice.py:45: AssertionError"}, "description": "Search for product by description or name", "steps": [{"name": "1. Pick parameters for search of a single product", "status": "passed", "start": 1720471606005, "stop": 1720471606006}, {"name": "2. Get the product with these parameters: {'search': 'deus', 'name': 'exhr', 'rating': 10}", "status": "passed", "start": 1720471606006, "stop": 1720471606118}, {"name": "3. Check if status code of the response is equal to 200", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"D:\\Git\\Go-Kafka-gRPC-MongoDB-microservice\\tests\\src\\base_test_case\\test_microservice.py\", line 45, in products_search_get_req\n    assert response.status_code == 200\n"}, "start": 1720471606118, "stop": 1720471606119}], "parameters": [{"name": "product_model", "value": "{'category_id': None,\n 'created_at': None,\n 'description': 'deus',\n 'image_url': None,\n 'name': 'exhr',\n 'photos': None,\n 'price': 691029.526710028,\n 'product_id': None,\n 'quantity': 10,\n 'rating': 10,\n 'updated_at': None}"}], "start": 1720471606005, "stop": 1720471606119, "uuid": "4eed5397-ace9-4f68-aac6-7e03d59a11e1", "historyId": "3a5a6e3f0ea4b6444c03f648c44ed7a6", "testCaseId": "80dc06290346a7d13dc0813955157439", "fullName": "pytest_fold.test_positive.TestService#test_products_search_get_req", "labels": [{"name": "feature", "value": "Search for product"}, {"name": "severity", "value": "normal"}, {"name": "story", "value": "Testing with semi-correct inputs"}, {"name": "parentSuite", "value": "pytest_fold"}, {"name": "suite", "value": "test_positive"}, {"name": "subSuite", "value": "TestService"}, {"name": "host", "value": "Sanua-PC"}, {"name": "thread", "value": "1632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pytest_fold.test_positive"}]}