{"name": "test_products_product_id_get_req[product_model1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code", "trace": "self = <pytest_fold.test_positive.TestService object at 0x0000020C276391C0>\nproduct_model = {'category_id': None,\n 'created_at': None,\n 'description': 'Or local guy.',\n 'image_url': None,\n 'name': 'beyond',\n 'photos': None,\n 'price': 15.6016019775585,\n 'product_id': None,\n 'quantity': 4894,\n 'rating': 2,\n 'updated_at': None}\nservice_api = <pytest_fold.conftest.ApiClient object at 0x0000020C27C5DEE0>\n\n    @allure.feature('Get product by id')\n    @allure.description('Get single product by id')\n    def test_products_product_id_get_req(self, product_model, service_api):\n>       super().products_product_id_get_req(product_model, service_api)\n\npytest_fold\\test_positive.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nproduct_model = {'category_id': None,\n 'created_at': None,\n 'description': 'Or local guy.',\n 'image_url': None,\n 'name': 'beyond',\n 'photos': None,\n 'price': 15.6016019775585,\n 'product_id': None,\n 'quantity': 4894,\n 'rating': 2,\n 'updated_at': None}\nservice_api = <pytest_fold.conftest.ApiClient object at 0x0000020C27C5DEE0>\n\n    @staticmethod\n    def products_product_id_get_req(product_model, service_api):\n        with allure.step('1. Pick id of a single product'):\n            product_id = product_model.product_id\n        with allure.step('2. Get the product by id picked during the previous step'):\n            response = service_api.get(f'products/{product_id}')\n        with allure.step('3. Check if status code of the response is equal to 200'):\n>           assert response.status_code == 200\nE           assert 500 == 200\nE            +  where 500 = <Response [500]>.status_code\n\nsrc\\base_test_case\\test_microservice.py:23: AssertionError"}, "description": "Get single product by id", "steps": [{"name": "1. Pick id of a single product", "status": "passed", "start": 1720471605193, "stop": 1720471605193}, {"name": "2. Get the product by id picked during the previous step", "status": "passed", "start": 1720471605193, "stop": 1720471605299}, {"name": "3. Check if status code of the response is equal to 200", "status": "failed", "statusDetails": {"message": "AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code\n", "trace": "  File \"D:\\Git\\Go-Kafka-gRPC-MongoDB-microservice\\tests\\src\\base_test_case\\test_microservice.py\", line 23, in products_product_id_get_req\n    assert response.status_code == 200\n"}, "start": 1720471605299, "stop": 1720471605299}], "parameters": [{"name": "product_model", "value": "{'category_id': None,\n 'created_at': None,\n 'description': 'Or local guy.',\n 'image_url': None,\n 'name': 'beyond',\n 'photos': None,\n 'price': 15.6016019775585,\n 'product_id': None,\n 'quantity': 4894,\n 'rating': 2,\n 'updated_at': None}"}], "start": 1720471605193, "stop": 1720471605299, "uuid": "dd2151fe-9d46-49af-ba54-3ef126c9a3e3", "historyId": "4dcfcd5cdb7a5ff7b9971f3876e5793a", "testCaseId": "054da09bbd48497595d0c0d9f76cf911", "fullName": "pytest_fold.test_positive.TestService#test_products_product_id_get_req", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Get product by id"}, {"name": "story", "value": "Testing with semi-correct inputs"}, {"name": "parentSuite", "value": "pytest_fold"}, {"name": "suite", "value": "test_positive"}, {"name": "subSuite", "value": "TestService"}, {"name": "host", "value": "Sanua-PC"}, {"name": "thread", "value": "1632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pytest_fold.test_positive"}]}